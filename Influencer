// TODO: Auto-generated Javadoc
/**
 * The Influencer class represents an
 * influencer and their social media
 * statistics.
 *
 * @author Joshua Lee
 * @author Abia Zahir
 * @author Archit Gupta
 * @version 11/18/2022
 * @version 11/18/2022
 * @version 11/18/2022
 */
public class Influencer {

    /** The name. */
    private String name;
    
    /** The channel. */
    private String channel;
    
    /** The country. */
    private String country;
    
    /** The topic. */
    private String topic;
    
    /** The months. */
    private String months;
    
    /** The stats. */
    private Statistics stats;

    /**
     * The constructor for the Influencer class.
     * 
     * @param name
     *            String of influencer's name.
     * @param channel
     *            String of influencer's channel.
     * @param country
     *            String of influencer's country.
     * @param topic
     *            String of influencer's topic.
     * @param months
     *            String of influencer's months.
     * @param li
     *            Integer representing likes.
     * @param pt
     *            Integer representing posts.
     * @param fw
     *            Integer representing followers.
     * @param ct
     *            Integer representing comments.
     * @param vw
     *            Integer representing views.
     */
    public Influencer(
        String name,
        String channel,
        String country,
        String topic,
        String months,
        int li,
        int pt,
        int fw,
        int ct,
        int vw) {
        this.name = name;
        this.channel = channel;
        this.country = country;
        this.topic = topic;
        this.months = months;
        this.stats = new Statistics(li, pt, fw, ct, vw);
    }


    /**
     * Gets the name field.
     * 
     * @return String name field.
     */
    public String getName() {
        return name;
    }


    /**
     * Gets the channel field.
     * 
     * @return String channel field.
     */
    public String getChannel() {
        return channel;
    }


    /**
     * Gets the country field.
     * 
     * @return String country field.
     */
    public String getCountry() {
        return country;
    }


    /**
     * Gets the topic field.
     * 
     * @return String topic field.
     */
    public String getTopic() {
        return topic;
    }


    /**
     * Gets the month field.
     * 
     * @return String month field.
     */
    public String getMonth() {
        return months;
    }


    /**
     * Gets the stats field.
     * 
     * @return Statistics object.
     */
    public Statistics getStats() {
        return stats;
    }

public void nameSort(Influencer args, Statistics other) {
        Statistics temp;
        for (int j = 0; j < myArray.length; j++) {
            for (int i = j + 1; i < myArray.length; i++) {
                if (myArray[0].compareTo(myArray[1]) < 0) {
                    temp = myArray[j];
                    myArray[j] = myArray[i];
                    myArray[i] = temp;

                }
                if (this.name.equals(this.channel)) {
                    myArray[0] = new Statistics(Months.JANUARY, 
                        other.getComments(), other.getFollowers(), 
                        other.getLikes(), other.getPosts(),
                        other.getViews());
                    myArray[1] = new Statistics(Months.FEBRUARY,
                        other.getComments(), other.getFollowers(), 
                        other.getLikes(), other.getPosts(),
                        other.getViews());
                    myArray[2] = new Statistics(Months.MARCH, 
                        other.getComments(), other.getFollowers(), 
                        other.getLikes(), other.getPosts(),
                        other.getViews());                   
                    
            }
            }
        }
    }


    public void rateSort(EngagementCalculator calc, Statistics other) {
        Statistics temp;
        for (int j = 0; j < myArray.length; j++) {
            for (int i = j + 1; i < myArray.length; i++) {
                if (myArray[0].compareTo(myArray[1]) < 0) {
                    temp = myArray[j];
                    myArray[j] = myArray[i];
                    myArray[i] = temp;

                }
                if (calc.getEngagementRate()==(calc.rate)) {
                    myArray[0] = new Statistics(Months.JANUARY, 
                        other.getComments(), other.getFollowers(), 
                        other.getLikes(), other.getPosts(),
                        other.getViews());

                }
            }
        }
    }


    public void traditionalSort(EngagementCalculator calc, Statistics other) {
        Statistics temp;
        for (int j = 0; j < myArray.length; j++) {
            for (int i = j + 1; i < myArray.length; i++) {
                if (myArray[0].compareTo(myArray[1]) < 0) {
                    temp = myArray[j];
                    myArray[j] = myArray[i];
                    myArray[i] = temp;

                }
                if (calc.getEngagementRate()==(calc.rate)) {
                    myArray[0] = new Statistics(Months.JANUARY, 
                        other.getComments(), other.getFollowers(), 
                        other.getLikes(), other.getPosts(),
                        other.getViews());
                }
            }

        }
    }


    public void reachSort(EngagementCalculator calc, Statistics other) {
        Statistics temp;
        for (int j = 0; j < myArray.length; j++) {
            for (int i = j + 1; i < myArray.length; i++) {
                if (myArray[0].compareTo(myArray[1]) < 0) {
                    temp = myArray[j];
                    myArray[j] = myArray[i];
                    myArray[i] = temp;

                }
                if (calc.reach==(calc.getEngagementReach())) {
                    myArray[0] = new Statistics(Months.JANUARY, 
                        other.getComments(), other.getFollowers(), 
                        other.getLikes(), other.getPosts(),
                        other.getViews());
                }
            }
        }
    }


    public void janSort(Statistics other) {
        Statistics temp;
        for (int j = 0; j < myArray.length; j++) {
            for (int i = j + 1; i < myArray.length; i++) {
                if (myArray[0].compareTo(myArray[1]) < 0) {
                    temp = myArray[j];
                    myArray[j] = myArray[i];
                    myArray[i] = temp;

                }
                if ((other.getMonths().equals(Months.JANUARY))) {
                    myArray[0] = new Statistics(Months.JANUARY, 
                        other.getComments(), other.getFollowers(), 
                        other.getLikes(), other.getPosts(),
                        other.getViews());
                   
                }
            }

        }

    }


    public void febSort(Statistics other) {
        Statistics temp;
        for (int j = 0; j < myArray.length; j++) {
            for (int i = j + 1; i < myArray.length; i++) {
                if (myArray[0].compareTo(myArray[1]) < 0) {
                    temp = myArray[j];
                    myArray[j] = myArray[i];
                    myArray[i] = temp;

                }
                if ((other.getMonths().equals(Months.FEBRUARY))) {
                    myArray[0] = new Statistics(Months.FEBRUARY, 
                        other.getComments(), other.getFollowers(), 
                        other.getLikes(), other.getPosts(),
                        other.getViews());

                }
            }
        }
    }


    public void marSort(Statistics other) {
        Statistics temp;
        for (int j = 0; j < myArray.length; j++) {
            for (int i = j + 1; i < myArray.length; i++) {
                if (myArray[0].compareTo(myArray[1]) < 0) {
                    temp = myArray[j];
                    myArray[j] = myArray[i];
                    myArray[i] = temp;

                }
                if ((other.getMonths().equals(Months.MARCH))) {
                    myArray[0] = new Statistics(Months.MARCH, 
                        other.getComments(), other.getFollowers(), 
                        other.getLikes(), other.getPosts(),
                        other.getViews());
                }
            }
        }

    }


    public void quarterSort(Statistics other) {
        Statistics temp;
        for (int j = 0; j < myArray.length; j++) {
            for (int i = j + 1; i < myArray.length; i++) {
                if (myArray[0].compareTo(myArray[1]) < 0) {
                    temp = myArray[j];
                    myArray[j] = myArray[i];
                    myArray[i] = temp;

                }
                if ((other.getMonths().equals(Months.JANUARY)) &&
                    (other.getMonths().equals(Months.FEBRUARY)) &&
                    (other.getMonths().equals(Months.MARCH))) {
                    myArray[0] = new Statistics(Months.JANUARY, 
                        other.getComments(), other.getFollowers(), 
                        other.getLikes(), other.getPosts(),
                        other.getViews());
                    myArray[1] = new Statistics(Months.FEBRUARY,
                        other.getComments(), other.getFollowers(), 
                        other.getLikes(), other.getPosts(),
                        other.getViews());
                    myArray[2] = new Statistics(Months.MARCH, 
                        other.getComments(), other.getFollowers(), 
                        other.getLikes(), other.getPosts(),
                        other.getViews());                   
                    
            }
            }
        }

    }
    

    /**
     * Checks to see if two objects are equal.
     *
     * @param obj the obj
     * @return true if objects are equal,
     *         false if otherwise.
     */
    public boolean equals(Object obj) {

        if (obj == null) {
            return false;
        }
        if (this == obj) {
            return true;
        }
        if (this.getClass() == obj.getClass()) {
            return this.getName().equals(((Influencer)obj).getName()) && this
                .getName().equals(((Influencer)obj).getName()) && this
                    .getChannel().equals(((Influencer)obj).getChannel()) && this
                        .getCountry().equals(((Influencer)obj).getCountry())
                && this.getTopic().equals(((Influencer)obj).getTopic()) && this
                    .getStats().equals(((Influencer)obj).getStats());
        }
        else {
            return false;
        }
    }

}
