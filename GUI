import cs2.Button;
import cs2.Shape;
import cs2.Window;
import cs2.WindowSide;
import java.awt.Color;

// TODO: Auto-generated Javadoc
/**
 * Front end class for the project. Displays a graphical interface
 * End user has interactable buttons to find the fitted data for
 * Janruary, Febrary and March
 */

/**
*
*@author Joshua Lee
*@version 11/18/2022
*@author Abia Zahir
*@version 11/18/2022
*@author Archit Gupta
*@version 11/18/2022
*/
public class GUI {
    private Window window;
    private Button quit;
    private Button nameSort;
    private Button rateSort;
    private Button traditional;
    private Button reach;
    private Button jan;
    private Button feb;
    private Button mar;
    private Button quarter;
    private EngagementCalculator calculator;
    private EngagementReader reader;
    
    
    /**
     * Instantiates a new gui.
     *
     * @param reader the reader
     */
    public GUI(EngagementReader reader) {
        this.reader = reader;
        window = new Window("Social Media Visualization");
        
        nameSort = new Button("Sort by Channel Name");
        this.window.addButton(nameSort, WindowSide.NORTH);
        
        rateSort = new Button("Sort by Engagement Rate");
        this.window.addButton(rateSort, WindowSide.NORTH);
        
        quit = new Button("Quit");
        this.window.addButton(quit, WindowSide.NORTH);
        quit.onClick(this, "clickedQuit");
        
        traditional = new Button("Traditional Engagement Rate");
        this.window.addButton(traditional, WindowSide.WEST);
        
        reach = new Button("Reach Engagement Rate");
        this.window.addButton(reach, WindowSide.WEST);
        
        jan = new Button("January");
        this.window.addButton(jan, WindowSide.SOUTH);
        
        feb = new Button("February");
        this.window.addButton(feb, WindowSide.SOUTH);
        
        mar = new Button("March");
        this.window.addButton(mar, WindowSide.SOUTH);
        
        quarter = new Button("First Quarter (Jan - March)");
        this.window.addButton(quarter, WindowSide.SOUTH);
        
        
    }
    
    /**
     * Clicked quit.
     *
     * @param button the button
     */
    public void clickedQuit(Button button) {
        System.exit(0);
    }
    
    /**
     * Clicked name sort.
     */
    public void clickedNameSort() {
        if (nameSort == null) {
            TextShape text = new TextShape(0,0, "Sort by Channel Name");
            int x = window.getGraphPanelWidth()/2 - text.getWidth()/2;
            int y = window.getGraphPanelHeight()/2 - text.getHeight()/2;
            text.setX(x);
            text.setY(y);
            
            window.addShape(text);
            }
        else{
            int size = nextInt(50) + 50;
            int x = randomGenerator.nextInt(window.getGraphPanelWidth() - size);
            int y = randomGenerator.nextInt(window.getGraphPanelHeight() - size);
            nameSort = new Shape(x, y, size, Color.GRAY);

            nameSort.onClick(this, "clickedQuit");
            window.addButton(quitButton, WindowSide.NORTH);
            
            
            currentShape = new CircleShape(x, y, size, Color.RED);

        }
    }
    
    /**
     * Clicked rate sort.
     */
    public void clickedRateSort() {
        
    }
    
    /**
     * Clicked traditional.
     */
    public void clickedTraditional() {
        
    }
    
    /**
     * Clicked reach.
     */
    public void clickedReach() {
        
    }
    
    /**
     * Clicked jan.
     */
    public void clickedJan() {
        
    }
    
    /**
     * Clicked feb.
     */
    public void clickedFeb() {
        
    }
    
    /**
     * Clicked mar.
     */
    public void clickedMar() {
        
    }
    
    /**
     * Clicked quarter.
     */
    public void clickedQuarter() {
        
    }
    

}
