/**
 * The Class Statistics.
 *
 * @author Joshua Lee
 * @author Abia Zahir
 * @author Archit Gupta
 * @version 11/18/2022
 * @version 11/18/2022
 * @version 11/18/2022
 * @param <Months>
 */
public class Statistics<Months> implements Comparable<Statistics> {

    /** The likes. */
    private int likes;
    
    /** The posts. */
    private int posts;
    
    /** The followers. */
    private int followers;
    
    /** The comments. */
    private int comments;
    
    /** The views. */
    private int views;

    /** The months. */
    private Months month;

    /**
     * Instantiates a new statistics.
     *
     * @param mon the month
     * @param li the likes
     * @param pt the posts
     * @param fw the followers
     * @param ct the comments
     * @param vw the views
     */
    public Statistics(Months mon, int li, int pt, int fw, int ct, int vw) {
        likes = li;
        posts = pt;
        followers = fw;
        comments = ct;
        views = vw;
        month = mon;
    }


    /**
     * Gets the likes.
     *
     * @return the likes
     */
    public int getLikes() {
        return likes;
    }


    /**
     * Gets the posts.
     *
     * @return the posts
     */
    public int getPosts() {
        return posts;
    }


    /**
     * Gets the followers.
     *
     * @return the followers
     */
    public int getFollowers() {
        return followers;
    }


    /**
     * Gets the comments.
     *
     * @return the comments
     */
    public int getComments() {
        return comments;
    }


    /**
     * Gets the views.
     *
     * @return the views
     */
    public int getViews() {
        return views;
    }

    /**
    * Gets the month.
    * 
    * @return the month.
    */
    public Months getMonths() {
        return month;
    }


    /**
     * Checks if is less than or equal to.
     *
     * @param other the other
     * @return true, if is less than or equal to
     */
    public boolean isLessThanOrEqualTo(Statistics other) {
        if ((this.likes <= other.likes) && (this.posts <= other.posts)
            && (this.followers <= other.followers)
            && (this.comments <= other.comments)
            && (this.views <= other.views)) {
            return true;
        }
        else {
            return false;
        }
    }


    /**
     * Equals.
     *
     * @param obj the obj
     * @return true, if successful
     */
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (this.getClass() == obj.getClass()) {
            Statistics stats = (Statistics)obj;
            return this.likes == stats.likes && this.posts == stats.posts
                && this.followers == stats.followers
                && this.comments == stats.comments && this.views == stats.views;
        }
        else {
            return false;
        }
    }


    /**
     * Compare to.
     *
     * @param stats the stats
     * @return the int
     */
    @Override
    public int compareTo(Statistics stats) {
        if (stats == null) {
            throw new IllegalArgumentException();
        }
        int otherTotal = 0;
        int total = 0;
        otherTotal = stats.likes + stats.posts + stats.followers
            + stats.comments + stats.views;
        total = this.likes + this.posts + this.followers + this.comments
            + this.views;

        if (total < otherTotal) {
            return -1;
        }
        if (total > otherTotal) {
            return 1;
        }
        return 0;

    }

}
